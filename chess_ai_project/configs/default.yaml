# =============================================================================
# 中国象棋AI系统默认配置文件
# =============================================================================
# 
# 本配置文件包含了Chess AI Kiro系统的所有核心配置参数
# 包括三个主要子系统：棋盘识别、AI引擎、实时分析系统
# 
# 配置文件结构：
# - system: 系统全局配置
# - chess_board_recognition: 棋盘识别系统配置
# - chinese_chess_ai_engine: 象棋AI引擎配置  
# - real_time_analysis_system: 实时分析系统配置
# - database: 数据库配置
# - performance: 性能监控配置
#
# =============================================================================

# =============================================================================
# 系统全局配置
# =============================================================================
system:
  name: "Chess AI Kiro"                    # 系统名称，用于日志和界面显示
  version: "0.1.0"                         # 系统版本号，遵循语义化版本控制
  debug: false                             # 调试模式开关，true时输出详细调试信息
  log_level: "INFO"                        # 日志级别：DEBUG, INFO, WARNING, ERROR, CRITICAL
  log_file: "logs/chess_ai.log"            # 日志文件路径，相对于项目根目录

# =============================================================================
# 棋盘识别系统配置
# 基于YOLO11的计算机视觉系统，用于识别屏幕上的中国象棋棋局
# =============================================================================
chess_board_recognition:
  
  # ---------------------------------------------------------------------------
  # 数据收集配置 - 用于训练数据的收集和管理
  # ---------------------------------------------------------------------------
  data_collection:
    save_path: "./data/captures"           # 截图保存路径，建议使用绝对路径避免路径问题
    auto_interval: 2                       # 自动截图间隔（秒），范围1-10秒，过短可能影响性能
    image_format: "jpg"                    # 图像格式：jpg(压缩率高), png(质量高), bmp(无压缩)
    region: [0, 0, 800, 600]              # 截图区域 [x起始, y起始, 宽度, 高度]，像素单位
  
  # ---------------------------------------------------------------------------
  # 模型训练配置 - YOLO11模型训练相关参数
  # ---------------------------------------------------------------------------
  training:
    epochs: 100                            # 训练轮数，建议100-300，过多可能过拟合
    batch_size: 16                         # 批次大小，根据GPU内存调整：8(4GB), 16(8GB), 32(16GB+)
    learning_rate: 0.001                   # 学习率，Adam优化器推荐值，过大可能不收敛，过小收敛慢
    image_size: 640                        # 输入图像尺寸，YOLO标准尺寸，必须是32的倍数
    train_ratio: 0.8                       # 训练集比例，推荐0.7-0.8
    val_ratio: 0.1                         # 验证集比例，用于训练过程中的模型评估
    test_ratio: 0.1                        # 测试集比例，用于最终模型性能评估
  
  # ---------------------------------------------------------------------------
  # 模型推理配置 - 训练完成后的模型推理参数
  # ---------------------------------------------------------------------------
  inference:
    model_path: "./models/chess_board_yolo11.pt"  # 训练好的模型文件路径
    confidence_threshold: 0.5              # 置信度阈值，低于此值的检测结果将被过滤
    nms_threshold: 0.4                     # 非极大值抑制阈值，用于去除重叠的检测框
    device: "auto"                         # 推理设备：auto(自动选择), cpu(CPU), cuda(GPU)
  
  # ---------------------------------------------------------------------------
  # 类别定义 - YOLO模型需要识别的所有目标类别
  # 顺序很重要，训练时的类别ID与此列表索引对应
  # ---------------------------------------------------------------------------
  classes:
    - "board"                              # 0: 棋盘边界，用于定位整个棋盘
    - "grid_lines"                         # 1: 网格线，用于精确定位棋子位置
    - "red_king"                           # 2: 红方帅，最重要的棋子
    - "red_advisor"                        # 3: 红方仕，保护帅的棋子
    - "red_bishop"                         # 4: 红方相，防守棋子
    - "red_knight"                         # 5: 红方马，攻击力强的棋子
    - "red_rook"                           # 6: 红方车，最强攻击棋子
    - "red_cannon"                         # 7: 红方炮，远程攻击棋子
    - "red_pawn"                           # 8: 红方兵，前锋棋子
    - "black_king"                         # 9: 黑方将，对应红方帅
    - "black_advisor"                      # 10: 黑方士，对应红方仕
    - "black_bishop"                       # 11: 黑方象，对应红方相
    - "black_knight"                       # 12: 黑方马，对应红方马
    - "black_rook"                         # 13: 黑方车，对应红方车
    - "black_cannon"                       # 14: 黑方炮，对应红方炮
    - "black_pawn"                         # 15: 黑方卒，对应红方兵
    - "selected_piece"                     # 16: 选中状态，用于识别当前选中的棋子

# =============================================================================
# 象棋AI引擎配置
# 基于深度强化学习的高性能象棋对弈系统，采用AlphaZero架构
# =============================================================================
chinese_chess_ai_engine:
  
  # ---------------------------------------------------------------------------
  # 神经网络模型配置 - ResNet + Attention架构参数
  # ---------------------------------------------------------------------------
  model:
    input_channels: 14                     # 输入通道数：棋子类型、颜色、历史位置等特征
    num_blocks: 20                         # ResNet块数量，更多块提高表达能力但增加计算量
    model_path: "./models/chess_ai_model.pt"  # 模型文件保存路径
    device: "auto"                         # 计算设备：auto(自动), cpu(CPU), cuda(GPU)
  
  # ---------------------------------------------------------------------------
  # MCTS搜索配置 - 蒙特卡洛树搜索算法参数
  # ---------------------------------------------------------------------------
  mcts:
    num_simulations: 800                   # 每次搜索的模拟次数，更多次数提高棋力但增加耗时
    c_puct: 1.0                           # UCB公式中的探索常数，平衡探索与利用
    temperature: 1.0                       # 温度参数，控制走法选择的随机性，训练时>0，对弈时=0
    dirichlet_alpha: 0.3                   # Dirichlet噪声参数，增加根节点探索性
    dirichlet_epsilon: 0.25                # Dirichlet噪声混合比例，0.25表示25%噪声
  
  # ---------------------------------------------------------------------------
  # 训练配置 - 强化学习训练相关参数
  # ---------------------------------------------------------------------------
  training:
    learning_rate: 0.001                   # 神经网络学习率，Adam优化器推荐值
    batch_size: 32                         # 训练批次大小，根据内存容量调整
    num_epochs: 100                        # 训练轮数，每轮使用所有自对弈数据
    weight_decay: 0.0001                   # L2正则化系数，防止过拟合
    lr_scheduler: "cosine"                 # 学习率调度器：cosine(余弦退火), step(阶梯), exponential(指数)
    self_play_games: 1000                  # 每次迭代的自对弈局数，更多局数提供更多训练数据
  
  # ---------------------------------------------------------------------------
  # 推理配置 - 对弈和分析时的参数设置
  # ---------------------------------------------------------------------------
  inference:
    search_time: 5.0                       # 每步思考时间（秒），影响棋力和响应速度
    max_simulations: 1000                  # 最大搜索次数，防止超时
    difficulty_level: 5                    # AI难度等级（1-10），影响搜索深度和时间
    use_opening_book: true                 # 是否使用开局库，提高开局质量
    use_endgame_tablebase: true            # 是否使用残局库，提高残局准确性
  
  # ---------------------------------------------------------------------------
  # API服务配置 - FastAPI服务器设置
  # ---------------------------------------------------------------------------
  api:
    host: "localhost"                      # 服务器绑定地址，localhost仅本机访问，0.0.0.0允许外部访问
    port: 8000                            # 服务端口，确保端口未被占用
    workers: 1                            # 工作进程数，多进程可提高并发但增加内存占用

# =============================================================================
# 实时分析系统配置
# 整合棋盘识别和AI引擎，提供实时的棋局分析和走法建议
# =============================================================================
real_time_analysis_system:
  
  # ---------------------------------------------------------------------------
  # 屏幕监控配置 - 实时监控屏幕变化
  # ---------------------------------------------------------------------------
  screen_monitor:
    monitor_interval: 2                    # 屏幕监控间隔（秒），过短影响性能，过长响应慢
    region: [0, 0, 800, 600]              # 监控区域 [x, y, width, height]，建议覆盖整个棋盘
    change_threshold: 0.95                 # 图像相似度阈值，低于此值认为棋局发生变化
  
  # ---------------------------------------------------------------------------
  # 分析配置 - AI分析相关设置
  # ---------------------------------------------------------------------------
  analysis:
    enable_ai_analysis: true               # 是否启用AI分析，关闭可节省计算资源
    analysis_timeout: 10                   # AI分析超时时间（秒），防止长时间等待
    max_candidate_moves: 5                 # 最多显示的候选走法数量，过多影响界面清晰度
    enable_win_probability: true           # 是否计算胜率，需要额外计算时间
  
  # ---------------------------------------------------------------------------
  # 用户界面配置 - 叠加显示和可视化设置
  # ---------------------------------------------------------------------------
  ui:
    overlay_enabled: true                  # 是否启用界面叠加显示
    overlay_opacity: 0.7                   # 叠加层透明度（0-1），0完全透明，1完全不透明
    move_highlight_color: [0, 255, 0]      # 推荐走法高亮颜色 [R, G, B]，绿色表示好走法
    selected_piece_color: [255, 255, 0]    # 选中棋子高亮颜色 [R, G, B]，黄色表示选中
    win_probability_chart: true            # 是否显示胜率变化图表
  
  # ---------------------------------------------------------------------------
  # 数据记录配置 - 对局数据的保存和导出
  # ---------------------------------------------------------------------------
  data_recording:
    enable_recording: true                 # 是否记录对局数据，用于后续分析和改进
    save_path: "./data/sessions"           # 对局数据保存路径
    export_formats: ["json", "csv"]        # 导出格式：json(结构化), csv(表格), pgn(标准棋谱)

# =============================================================================
# 数据库配置
# 用于存储对局记录、用户数据、系统日志等信息
# =============================================================================
database:
  type: "sqlite"                          # 数据库类型：sqlite(轻量级), mysql(高性能), postgresql(功能丰富)
  path: "./data/chess_ai.db"              # SQLite数据库文件路径，其他数据库需要连接字符串
  backup_interval: 3600                   # 数据库备份间隔（秒），3600秒=1小时

# =============================================================================
# 性能监控配置
# 监控系统资源使用情况，确保系统稳定运行
# =============================================================================
performance:
  enable_monitoring: true                 # 是否启用性能监控，建议在生产环境中启用
  metrics_interval: 60                    # 性能指标收集间隔（秒），过短影响性能
  memory_limit: "2GB"                     # 内存使用限制，超过此值将触发警告或清理
  cpu_limit: 80                          # CPU使用率限制（百分比），超过此值将触发性能优化